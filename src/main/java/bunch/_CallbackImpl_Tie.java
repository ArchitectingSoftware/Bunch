// Tie class generated by rmic, do not edit.
// Contents subject to change without notice.

package bunch;

import java.io.Serializable;
import java.rmi.Remote;
import java.rmi.RemoteException;
import javax.rmi.CORBA.Tie;
import javax.rmi.CORBA.Util;
import org.omg.CORBA.BAD_OPERATION;
import org.omg.CORBA.ORB;
import org.omg.CORBA.SystemException;
import org.omg.CORBA.portable.InputStream;
import org.omg.CORBA.portable.OutputStream;
import org.omg.CORBA.portable.ResponseHandler;
import org.omg.CORBA.portable.UnknownException;
import org.omg.CORBA_2_3.portable.ObjectImpl;


public class _CallbackImpl_Tie extends ObjectImpl implements Tie {
    
    private CallbackImpl target = null;
    
    private static final String[] _type_ids = {
        "RMI:bunch.Callback:0000000000000000"
    };
    
    public void setTarget(Remote target) {
        this.target = (CallbackImpl) target;
    }
    
    public Remote getTarget() {
        return target;
    }
    
    public org.omg.CORBA.Object thisObject() {
        return this;
    }
    
    public void deactivate() {
        _orb().disconnect(this);
        _set_delegate(null);
        target = null;
    }
    
    public ORB orb() {
        return _orb();
    }
    
    public void orb(ORB orb) {
        orb.connect(this);
    }
    
    public String[] _ids() { 
        return _type_ids;
    }
    
    public OutputStream  _invoke(String method, InputStream _in, ResponseHandler reply) throws SystemException {
        try {
            org.omg.CORBA_2_3.portable.InputStream in = 
                (org.omg.CORBA_2_3.portable.InputStream) _in;
            switch (method.length()) {
                case 14: 
                    if (method.equals("callFromServer")) {
                        String arg0 = (String) in.read_value(String.class);
                        byte[] result = target.callFromServer(arg0);
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
                        out.write_value(cast_array(result),byte[].class);
                        return out;
                    }
                case 15: 
                    if (method.equals("bCallFromServer")) {
                        String arg0 = (String) in.read_value(String.class);
                        boolean result = target.bCallFromServer(arg0);
                        OutputStream out = reply.createReply();
                        out.write_boolean(result);
                        return out;
                    }
                case 21: 
                    if (method.equals("callFromServerWithObj")) {
                        String arg0 = (String) in.read_value(String.class);
                        byte[] arg1 = (byte[]) in.read_value(byte[].class);
                        byte[] result = target.callFromServerWithObj(arg0, arg1);
                        org.omg.CORBA_2_3.portable.OutputStream out = 
                            (org.omg.CORBA_2_3.portable.OutputStream) reply.createReply();
                        out.write_value(cast_array(result),byte[].class);
                        return out;
                    }
                case 22: 
                    if (method.equals("bCallFromServerWithObj")) {
                        String arg0 = (String) in.read_value(String.class);
                        byte[] arg1 = (byte[]) in.read_value(byte[].class);
                        boolean result = target.bCallFromServerWithObj(arg0, arg1);
                        OutputStream out = reply.createReply();
                        out.write_boolean(result);
                        return out;
                    }
            }
            throw new BAD_OPERATION();
        } catch (SystemException ex) {
            throw ex;
        } catch (Throwable ex) {
            throw new UnknownException(ex);
        }
    }
    
    // This method is required as a work-around for
    // a bug in the JDK 1.1.6 verifier.
    
    private Serializable cast_array(Object obj) {
        return (Serializable)obj;
    }
}
